

시험: 어플리케이션 개발(자바책 맨뒤 p227~)

개발환경 구축사항
	개발자들 환경설정 맞추기 예를들어 tomcat maven 버젼통합
	git 이라는 소스관리 프로그램
		형상 관리, 버젼 관리
		개발환경 구축
		제품 무결성을 유지
		팀프로젝트 프로세스 관리
		버젼관리 프로그램
	테스트용서버 -> 실서버

클라이언트 개발 요구사항 파악 아닌것?
	클라이언트와 대화
	요구사항 문서 받기
	비즈니스 로직 (업무처리 로직)
		회사 보고서 문서로 파악

사용자 요구사항
	분석 - 설계 - 구현 - 테스트
		이과정에서 산출물들:
			문서, 유스케이스 클래스 다이어그램
			구현 산출물(ppt)문서들
			일관성을 유지하기위한 산출물?
			요구사항 추적 매트릭스: 프로젝트 진행단계별로 요구사항들이 어느 페이지 또는 
				어느 컴포넌트 등에 반영이 되었는지 매칭하는 표형식의 문서

Architecture 프로그램 구성 기반, 설계흐름
	client-server acrhitecture
	mvc architecture
	service oriented architecture

소프트웨어 architecture
	서비스지향 아키텍쳐(SOA : Service Oriented Architecture)
		웹서비스나 REST 서비스로 구현된 
		SW 모듈을 BPEL로 구현된 프로세스이다. 
		오케스트레이션 함으로써 프로세스 변경에 
		따른 정보시스템의 재구성을 
		신속 유용하게 할 수 있는 방식이다.

프로젝트 관리할때, 어떻게 하는지?
	버젼 관리 프로그램 git

어플리케이션 성능 관리: 5가지 속성
	1. 사용자환경 
		monitoring 및 평가 
    2. 소프트/하드웨어 요소들 
		성능 측정
	3. 애플리케이션 전송 플랫폼을 구성하는 
		소프트/하드웨어에서 이동하는 
		사용자정의 트랜잭션 프로파일링
    4. 플랫폼을 구성하는 소프트/하드웨어의 
		리소스 수요평가
	5. 위 4가지로 사용자 패턴 분석 성능 최적화위해 
		필요한 조치들을 우선순위에 따라 지정



통계 : java jfreechart

https://www.canva.com/design/DADb3VzYhPg/cctj8YAg2DAvd-Mrs1EhCg/edit?category=tACFasDnyEQ

---[요구사항 확인]시험 - 자바책 뒷부분 index-p213~226  

현행시스템 파악 3단계
	1. 시스템 구성 기능 interface 파악
	2. architecture software 현황 파악
	3. 어떤 hardware/network에서 실행 되는지 파악

운영체제별 요구사항 식별을 위해서 다음을 고려:
    - 신뢰도 : 장기간 사용시 문제 가능성
    - 성능: 대용량 데이터처리 능력 파악
    - 기술지원: 
    - 주변기기: 
    - 구축비용: 


개발기술 환경 파악:
	운영체제 응용소프트웨어사이에 위치한 middleware 및 dbms
	dbms를 고려할 때 주의사항
		1. 장기간 운영시 장애 발생 가능성 파악
		2. 대용량 데이터 처리능력 파악
		3. 안정성 파악
		4. db구축 비용 파악 (유료 software 오라클 등 회사에 지불할 금액)

요구사항 개발 프로세스: 도출-분석-명세-확인
	-도출: 요구사항 찾아내기 discover

요구사항 분석

요구사항 기술적 타당성검토(4가지)
	성능, 용량 산정 적정성
	
    시스템간 상호 운용성 - 다른 목적을 지닌 두개의 시스템을 지닌. 정보시스템을 
        교환하면서 효과적으로 운용 가능여부. 타 시스템/기계과 호환되는지.

    IT 트렌드 부합 여부, IT시장 성숙도, 기술 보안 여부
        정보기술 발전 방향에 맞게
        실현 가능성(특허 장애물 파악) 파악
    
	기술 위험도, risk
    
분석모델 확인하기
    분석모델 검증
        액터, 유스케이스, 유스케이스 명세서
        

클래스 다이어그램에 포함되는 요소들/의미 파악
	클래스/멤버변수 등


한국정보 지능원
	정보시스템 감리 지침/감사
		지침에 따라 분석모델 검증
		유스케이스 검증, 개념 클래스 검증, 분석클래스 검증
		
		UML 클래스/활동/시스템/
			유스케이스 다이어그램
				사용자 등 어떻게 사용되고, actor누가 사용하는지,
				각시스템이 무슨 기능인지
			시퀀스 다이어그램(순서)
			
			활동 다이어그램

요구사항 식별
	신뢰도(장기간 가능), 
	성능 (대량 데이터 처리가능)
	기술지원(vendor 소프트웨어가 잘 지원해주는지, open source처럼 사용자들 정보공유하는지,
			오픈소스 라이센스인지), 
	주변기기,
	구축비용 (장비 비용, 응용프로그램 라이센스, 유지관리비)

웹서비스
	middleware (web application Server, WAS 예를들어 
        - tomcat netty 가 동적으로 어떻게 돌아가는지, 개념/ 내용)


--
sql문 .properties에서 가져옴.
MyBatis에서 가져오는것과 비슷
--

--
Thread
 mainT
 T1
 T2
 thread끝나는 시점은 다를수 있음
  
 교착상태(dead-lock 동시에 CPU 이용)주의
 JVM이 메인 thread 생성
 
 new 객체 : Heap영역 메모리
 객체.start()
 run()오버라이드

Thread 상속하면 ,다른 클래스 상속 불가(다중상속x)
Runnable implement 해서, 다른 클래스 상속 허용


---
Java Network
server - client

ipconfig
ip4(ip addr) globally unique
255^4
사설(192.168.0.x)/
공용 네트워크
(ips 업체) 통신선로 ->공인아이피 구매
외부 공인아이피<->공유기(사설 아이피주소 할당)
192.168.0.1 개인 공유기
외부IP(공용ip)<->내부IP
네트워크 카드에 따라 16진수로 고유번호 부여
	(공유기 접근 가능)

mac주소관리 등록후 secure wifi
외부에서 wifi 연결 차단
ipconfig
기본 게이트웨이
포트포워딩
	domainName:ip
	외부ip:ip
nslookup
	www.naver.com
	210.89.164.90

상대 ip 접근
	INetAddress 클래스
웹 브라우저 검색창: 공용ip입력

socket programming


---
openjdk
시스템 변수: 
JAVA_HOME
	C:\Program Files\openjdk-11.0.2_windows-x64_bin\jdk-11.0.2
Path
	%JAVA_HOME%\bin

eclipse window > preference >java >installed jre
java 버전 변경





--instance method : 
	Heap에 객체가 생성되어야 호출가능.
new MethodTest().calculator(10, 20, '+');
new MethodTest().calculator2(20, 30, '/');

[Heap]
	[MethodTest]
		[calculator]
		[su1]10
		[su2]20
		[op] '+'
	[MethodTest]
		[calculator2]
		[su1] 20
		[su2] 30
		[op] '/'
		[result] .6666...
	[MethodTest]
		[concatString]
		
[Stack] first in last out
    calculator2
	calculator
	main


--memory
[stack]
    call된 method가 stack에 쌓이고, 
    return 하면 stack 메모리에서 없어짐
    선언된 기본자료형 변수 메모리에 저장
    int[] arr; //reference 자료형(위치; 주소 저장됨)


[heap] gc(garbage collection 자동으로 수행)
배열
new int[]
new 객체


--oop 클래스
1. 야구선수
------------
	- 팀 team
	- 등번호 backNO
	- 연봉 sal
	- 포지션 postion
	- 키 height
	- 무게 weight 
	- 나이 age
	- 성별 gem
	- 국적
	- 승률
	- 부상기록
2. 결혼정보프로그램 회원객체
	- 성별
	- 나이
	- 연봉 공개여부
	- 키 몸무게 공개여부
	- 키
	- 몸무게
	- 결혼 이력
	- 자녀여부
	- 희망 배우자 나이
	- 희망 배우자 스타일
3. 전화번호부

생성자 : Heap 메모리에 instance를 만듦
Object obj = new Object();
//obj에 주소값저장됨; obj.메소드(); obj.멤버;

[Stack]
	obj (reference variable stores address from Heap)
[Heap]
	Object주소값 0x123 과 접근연산자 .으로 멤버 접근
	new 로 객체 생성시 Heap 메모리에 쌓임
	할당안하면 Stack에 주소값 저장안됨
	프로그램 실행은 Stack에 메모리를 읽으면서 진행됨
[Static]
클래스 변수; 객체 생성하지 않고 쓸수있는 저장공간.

프로그램 시작과 동시에 
[static]에 static 변수들 메모리 저장됨
    new Person() [heap]에 저장된 static 변수들은
    [static]에 있는 static변수를 참조하게됨.

